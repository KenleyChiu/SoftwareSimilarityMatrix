class HashingTokenizer
!!!145477.java!!!	addCharacterToken(in ch : int) : void
        tokenizer.ordinaryChar(ch);
!!!145605.java!!!	isAtEnd() : boolean
        //A significant design decision here is the fact that an IOException will crash the system unwarranted after printing the stack trace
        //this function will not tamper with the order of the tokens
        tokenizer.pushBack();
        try {
            return tokenizer.nextToken() == StreamTokenizer.TT_EOF;
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
        return true;
!!!145733.java!!!	getNextTokenInfo() : Token
        //CHANGE: The EOF token has been removed from the tokenizer. The user of the class might need to do an isAtEnd check before using this
        if (this.isAtEnd()) throw new TokenizerEndException("Reached end of file. Use isAtEnd method to do prior checking");
        Token.TokenBuilder tokenBuilder = new Token.TokenBuilder();
        int tokenNumber = tokenizer.nextToken();
        int id;
        switch(tokenNumber){
            case StreamTokenizer.TT_EOL:
                tokenBuilder.setType(Token.TYPE.EOL);
                break;
            case StreamTokenizer.TT_NUMBER:
                //CHANGE: recently changed id for number to the NUMBER constant instead of the integer's hash value
                tokenBuilder.setTypeWithValue(Token.TYPE.NUMBER, tokenizer.nval);
                break;
            case StreamTokenizer.TT_WORD:
                //For strings
                tokenBuilder.setTypeWithValue(Token.TYPE.WORD, tokenizer.sval);
                break;

            default:
                //extra checks
                //a quote check here
                if (tokenNumber == QUOTE) tokenBuilder.setTypeWithValue(Token.TYPE.STRING_LITERAL, tokenizer.sval);
                else tokenBuilder.setTypeWithValue(Token.TYPE.OTHER, tokenNumber);
                break;
        }
        return tokenBuilder.setLineNo(tokenizer.lineno()).createToken();
!!!145861.java!!!	getNextTokenCluster(in size : int) : TokenCluster
        //Notes on the TokenizerEndException: this cannot be contained here because it will just return an empty cluster, which the user might not expect.
        /*Phase 1: this is the initial isAtEnd check, in the scenario that there is no more tokens right at the start of the call,
          a TokenizerEndException is thrown immediately. */
        if (this.isAtEnd()) throw new TokenizerEndException(
                "Cluster could not be formed. No tokens could be read prior to the end of file. " +
                "Consider using isAtEnd method for a priori checking");


        /*Phase 2: clusters the next at-least [size] tokens.*/
        TokenCluster.TokenClusterBuilder clusterOrganizer = new TokenCluster.TokenClusterBuilder();
        for (int i = 0; i < size; ++i){
            // since the first end-check has been passed by this point,
            // any encounter with the end-of-file just stops further collection (hence the break)
            if (this.isAtEnd()) break;
            clusterOrganizer.addNext(this.getNextTokenInfo());
        }

        return clusterOrganizer.cluster();
!!!145989.java!!!	remainingTokenClusters(in size : int) : TokenCluster
        Collection<TokenCluster> tokenClusters = new ArrayList<>();
        while(!this.isAtEnd()) {
            try {
                tokenClusters.add(this.getNextTokenCluster(size));
            } catch (TokenizerEndException ignored){}
            //IMPORTANT NOTE: this exception is contained in this class because the isAtEnd at the top will help us avoid this anyway
        }
        return tokenClusters;
!!!146117.java!!!	HashingTokenizer(inout reader : Reader)
        tokenizer = new StreamTokenizer(reader);
        tokenizer.quoteChar(QUOTE);


